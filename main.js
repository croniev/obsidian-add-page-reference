/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AddPageReference
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var obsidian = require("obsidian");
var AddPageReference = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isActive = false;
    this.page = 0;
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Loading plugin AddPageReference...");
      this.status = this.addStatusBarItem();
      this.statusEl = this.status.createEl("span", { text: "" });
      this.addCommand({
        id: "add-reference",
        name: "Add Reference",
        callback: () => {
          if (this.isActive) {
            this.addReference();
          }
        }
      });
      this.addCommand({
        id: "set-page",
        name: "Set Page",
        callback: () => {
          this.setPage(0);
        }
      });
      this.addCommand({
        id: "increase-page",
        name: "Increase Page",
        callback: () => {
          if (this.isActive) {
            this.setPage(1);
          }
        }
      });
      this.addCommand({
        id: "decrese-page",
        name: "Decrease Page",
        callback: () => {
          if (this.isActive) {
            this.setPage(-1);
          }
        }
      });
      AddPageReference.prototype.getEditor = function() {
        var view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!view || view.getMode() !== "source") {
          return null;
        }
        return view.sourceMode.cmEditor;
      };
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Unloading plugin AddPageReference...");
    });
  }
  addReference() {
    return __async(this, null, function* () {
      var editor = this.getEditor();
      if (editor == null) {
        return;
      }
      let insert = "(S." + this.page + ")";
      let pos = editor.getCursor();
      editor.replaceRange(insert, pos);
      pos.ch += insert.length;
      editor.setCursor(pos);
    });
  }
  setPage(direction) {
    return __async(this, null, function* () {
      if (direction == 1) {
        this.page++;
        this.statusEl.empty();
        this.statusEl = this.status.createEl("span", { text: "(S." + this.page + ")" });
      } else if (direction == -1) {
        this.page--;
        this.statusEl.empty();
        this.statusEl = this.status.createEl("span", { text: "(S." + this.page + ")" });
      } else if (direction == 0) {
        let res = parseInt(yield SetPageModal.Prompt(this.app));
        if (isNaN(res)) {
          this.isActive = false;
          this.statusEl.empty();
        } else {
          this.statusEl.empty();
          this.page = res;
          this.isActive = true;
          this.statusEl = this.status.createEl("span", { text: "(S." + this.page + ")" });
        }
      }
    });
  }
};
var SetPageModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.didSubmit = false;
    this.submitClickCallback = (evt) => this.submit();
    this.cancelClickCallback = (evt) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if (evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.input = "";
    this.waitForClose = new Promise((resolve, reject) => {
      this.resolvePromise = resolve;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app) {
    const newPromptModal = new SetPageModal(app);
    return newPromptModal.waitForClose;
  }
  display() {
    this.contentEl.empty();
    const mainContentContainer = this.contentEl.createDiv();
    this.inputComponent = this.createInputField(mainContentContainer);
  }
  createInputField(container) {
    const textComponent = new obsidian.TextComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.onChange((value) => this.input = value).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise("No input given.");
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener("keydown", this.submitEnterCallback);
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
    this.inputComponent.inputEl.select();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
};
//# sourceMappingURL=data:application/json;base64,
